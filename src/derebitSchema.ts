/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  'private/logout': {
    get: {
      responses: {
        /** foo */
        200: unknown
        /** result when used via rest/HTTP */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'public/get_last_trades_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** The sequence number of the first trade to be returned */
          start_seq?: components['parameters']['optional_start_seq']
          /** The sequence number of the last trade to be returned */
          end_seq?: components['parameters']['optional_end_seq']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_trades_history_response']
          }
        }
      }
    }
  }
  'private/set_email_language': {
    get: {
      parameters: {
        query: {
          /** The abbreviated language name. Valid values include `"en"`, `"ko"`, `"zh"` */
          language: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/orderstate': {
    get: {
      parameters: {
        query: {
          /** Required, the ID of the order to be retrieved */
          orderId?: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_orderstate_response']
          }
        }
      }
    }
  }
  'private/get_open_orders_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** Order type, default - `all` */
          type?: components['parameters']['optional_order_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_open_orders_response']
          }
        }
      }
    }
  }
  'private/cancel_all_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** Order type - limit, stop or all, default - `all` */
          type?: components['parameters']['optional_simple_order_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/disable_heartbeat': {
    get: {
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
        /** result when used via rest/HTTP */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/subscribe': {
    /**
     * Subscribe to one or more channels.
     *
     * The name of the channel determines what information will be provided, and
     * in what form.
     */
    get: {
      parameters: {
        query: {
          /** A list of channels to subscribe to. */
          channels: string[]
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_subscribe_response']
          }
        }
        /** not authorised */
        401: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/cancel_all_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Order type - limit, stop or all, default - `all` */
          type?: components['parameters']['optional_simple_order_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/get_historical_volatility': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_historical_volatility_response']
          }
        }
      }
    }
  }
  'private/close_position': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** The order type */
          type: components['parameters']['simple_order_type_market_limit']
          /** Optional price for limit order. */
          price?: components['parameters']['optional_price']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_buy_and_sell_response']
          }
        }
      }
    }
  }
  'public/unsubscribe': {
    get: {
      parameters: {
        query: {
          /** A list of channels to unsubscribe from. */
          channels: string[]
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_subscribe_response']
          }
        }
        /** not authorised */
        401: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/submit_transfer_to_user': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Amount of funds to be transferred */
          amount: components['parameters']['transfer_currency_amount']
          /** Destination address from address book */
          destination: components['parameters']['transfer_destination_for_user']
          /** TFA code, required when TFA is enabled for current account */
          tfa?: components['parameters']['tfa']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_submit_transfer_response']
          }
        }
      }
    }
  }
  'private/get_user_trades_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** The sequence number of the first trade to be returned */
          start_seq?: components['parameters']['optional_start_seq']
          /** The sequence number of the last trade to be returned */
          end_seq?: components['parameters']['optional_end_seq']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['user_trades_history_response']
          }
        }
      }
    }
  }
  'private/get_current_deposit_address': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_deposit_address_response']
          }
        }
      }
    }
  }
  'private/remove_from_address_book': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Address book type */
          type: components['parameters']['address_book_type']
          /** Address in currency format, it must be in address book */
          address: components['parameters']['currency_address_from_address_book']
          /** TFA code, required when TFA is enabled for current account */
          tfa?: components['parameters']['tfa']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_remove_from_address_book_response']
          }
        }
      }
    }
  }
  'public/get_last_trades_by_instrument_and_time': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** The earliest timestamp to return result for */
          start_timestamp: components['parameters']['start_timestamp']
          /** The most recent timestamp to return result for */
          end_timestamp: components['parameters']['end_timestamp']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_trades_history_response']
          }
        }
      }
    }
  }
  'public/get_currencies': {
    get: {
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_currencies_response']
          }
        }
      }
    }
  }
  'private/edit': {
    get: {
      parameters: {
        query: {
          /** The order id */
          order_id: components['parameters']['order_id']
          /** It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH */
          amount: components['parameters']['order_quantity']
          /** <p>The order price in base currency.</p> <p>When editing an option order with advanced=usd, the field price should be the option price value in USD.</p> <p>When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p> */
          price: components['parameters']['edit_order_price']
          /** <p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.</p> <p>Only valid in combination with time_in_force=`"good_til_cancelled"`</p> */
          post_only?: components['parameters']['post_only']
          /** Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options) */
          advanced?: components['parameters']['edit_advanced_order_type']
          /** Stop price, required for stop limit orders (Only for stop orders) */
          stop_price?: components['parameters']['stop_price']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_edit_response']
          }
        }
      }
    }
  }
  'private/datatable': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/get_order_book': {
    get: {
      parameters: {
        query: {
          /** The instrument name for which to retrieve the order book, see [`getinstruments`](#getinstruments) to obtain instrument names. */
          instrument_name: string
          /** The number of entries to return for bids and asks. */
          depth?: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_order_book_response']
          }
        }
      }
    }
  }
  'private/create_subaccount': {
    get: {
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_create_subaccount_response']
          }
        }
      }
    }
  }
  'public/get_book_summary_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_book_summary_response']
          }
        }
      }
    }
  }
  'private/cancel': {
    get: {
      parameters: {
        query: {
          /** The order id */
          order_id: components['parameters']['order_id']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_cancel_response']
          }
        }
      }
    }
  }
  'public/get_funding_chart_data': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Specifies time period. `8h` - 8 hours, `24h` - 24 hours */
          length?: components['parameters']['length_for_perpetual_chart']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_funding_chart_data_response']
          }
        }
      }
    }
  }
  'public/get_option_mark_prices': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_option_mark_prices_response']
          }
        }
      }
    }
  }
  'private/get_order_history_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** Number of requested items, default - `20` */
          count?: components['parameters']['optional_count20']
          /** The offset for pagination, default - `0` */
          offset?: components['parameters']['optional_offset']
          /** Include in result orders older than 2 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_orders']
          /** Include in result fully unfilled closed orders, default - `false` */
          include_unfilled?: components['parameters']['optional_include_unfilled_orders']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_order_history_response']
          }
        }
      }
    }
  }
  'private/sell': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH */
          amount: components['parameters']['order_quantity']
          /** The order type, default: `"limit"` */
          type?: components['parameters']['order_type']
          /** user defined label for the order (maximum 32 characters) */
          label?: components['parameters']['order_label']
          /** <p>The order price in base currency (Only for limit and stop_limit orders)</p> <p>When adding order with advanced=usd, the field price should be the option price value in USD.</p> <p>When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p> */
          price?: components['parameters']['order_price']
          /** <p>Specifies how long the order remains in effect. Default `"good_til_cancelled"`</p> <ul> <li>`"good_til_cancelled"` - unfilled order remains in order book until cancelled</li> <li>`"fill_or_kill"` - execute a transaction immediately and completely or not at all</li> <li>`"immediate_or_cancel"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</li> </ul> */
          time_in_force?: components['parameters']['time_in_force']
          /** Maximum amount within an order to be shown to other customers, `0` for invisible order */
          max_show?: components['parameters']['max_show']
          /** <p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.</p> <p>Only valid in combination with time_in_force=`"good_til_cancelled"`</p> */
          post_only?: components['parameters']['post_only']
          /** If `true`, the order is considered reduce-only which is intended to only reduce a current position */
          reduce_only?: components['parameters']['reduce_only']
          /** Stop price, required for stop limit orders (Only for stop orders) */
          stop_price?: components['parameters']['stop_price']
          /** Defines trigger type, required for `"stop_limit"` order type */
          trigger?: components['parameters']['trigger']
          /** Advanced option order type. (Only for options) */
          advanced?: components['parameters']['advanced_order_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_buy_and_sell_response']
          }
        }
      }
    }
  }
  'private/get_margins': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Amount, integer for future, float for option. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. */
          amount: number
          /** Price */
          price: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_margins_response']
          }
        }
      }
    }
  }
  'public/subscribe': {
    /**
     * Subscribe to one or more channels.
     *
     * This is the same method as [/private/subscribe](#private_subscribe), but it can only
     * be used for 'public' channels.
     */
    get: {
      parameters: {
        query: {
          /** A list of channels to subscribe to. */
          channels: string[]
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_subscribe_response']
          }
        }
        /** not authorised */
        401: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/set_password_for_subaccount': {
    get: {
      parameters: {
        query: {
          /** The user id for the subaccount */
          sid: number
          /** The password for the subaccount */
          password: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/get_last_trades_by_currency_and_time': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** The earliest timestamp to return result for */
          start_timestamp: components['parameters']['start_timestamp']
          /** The most recent timestamp to return result for */
          end_timestamp: components['parameters']['end_timestamp']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_trades_history_response']
          }
        }
      }
    }
  }
  'private/change_subaccount_name': {
    get: {
      parameters: {
        query: {
          /** The user id for the subaccount */
          sid: number
          /** The new user name */
          name: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/cancel_withdrawal': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** The withdrawal id */
          id: components['parameters']['withdrawal_id']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_withdraw_response']
          }
        }
      }
    }
  }
  'public/hello': {
    get: {
      parameters: {
        query: {
          /** Client software name */
          client_name: components['parameters']['client_software_name']
          /** Client software version */
          client_version: components['parameters']['client_software_version']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_test_response']
          }
        }
      }
    }
  }
  'public/get_contract_size': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_contract_size_response']
          }
        }
      }
    }
  }
  'public/getlasttrades': {
    get: {
      parameters: {
        query: {
          /** `"asc"` for ascending, `"desc"` for descending */
          sort?: string
          /** Either the name of the instrument, or `"all"` for all active instruments, `"futures"` for all active futures, or `"options"` for all active options. */
          instrument: string
          /** The number of trades returned (clamped to max 10000) */
          count?: number
          /** The ID of the first trade to be returned */
          startId?: number
          /** The ID of the last trade to be returned */
          endId?: number
          /** The trade sequence of the first trade to be returned */
          startSeq?: number
          /** The trade sequence of the last trade to be returned */
          endSeq?: number
          /** The timestamp (in ms) of the first trade to be returned */
          startTimestamp?: components['schemas']['timestamp']
          /** The timestamp (in ms) of the last trade to be returned */
          endTimestamp?: components['schemas']['timestamp']
          /** DEPRECATED, The ID after which trades are returned, for backward compatibility */
          since?: number
          /** DEPRECATED, alias to "sort", for backward compatibility */
          direction?: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_getlasttrades_response']
          }
        }
      }
    }
  }
  'public/getorderbook': {
    get: {
      parameters: {
        query: {
          /** The instrument name for which to retrieve the order book. */
          instrument: string
          /** The number of entries to return for bids and asks. */
          depth?: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_getorderbook_response']
          }
        }
      }
    }
  }
  'private/get_order_history_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Number of requested items, default - `20` */
          count?: components['parameters']['optional_count20']
          /** The offset for pagination, default - `0` */
          offset?: components['parameters']['optional_offset']
          /** Include in result orders older than 2 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_orders']
          /** Include in result fully unfilled closed orders, default - `false` */
          include_unfilled?: components['parameters']['optional_include_unfilled_orders']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_order_history_response']
          }
        }
      }
    }
  }
  'private/cancel_transfer_by_id': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Id of transfer */
          id: components['parameters']['transfer_id']
          /** TFA code, required when TFA is enabled for current account */
          tfa?: components['parameters']['tfa']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_submit_transfer_response']
          }
        }
      }
    }
  }
  'private/enable_cancel_on_disconnect': {
    get: {
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
        /** result when used via rest/HTTP */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/orderhistory': {
    get: {
      parameters: {
        query: {
          /** the number of items to be returned. */
          count?: number
          /** Either the name of an instrument, "future" of "option" */
          instrument?: string
          /** The offset for pagination */
          offset?: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_orderhistory_response']
          }
        }
      }
    }
  }
  'private/get_user_trades_by_order': {
    get: {
      parameters: {
        query: {
          /** The order id */
          order_id: components['parameters']['order_id']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['user_trades_by_order_response']
          }
        }
      }
    }
  }
  'public/ping': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/get_order_margin_by_ids': {
    get: {
      parameters: {
        query: {
          /** Ids of orders */
          ids: string[]
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_order_margin_by_ids_response']
          }
        }
      }
    }
  }
  'private/buy': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH */
          amount: components['parameters']['order_quantity']
          /** The order type, default: `"limit"` */
          type?: components['parameters']['order_type']
          /** user defined label for the order (maximum 32 characters) */
          label?: components['parameters']['order_label']
          /** <p>The order price in base currency (Only for limit and stop_limit orders)</p> <p>When adding order with advanced=usd, the field price should be the option price value in USD.</p> <p>When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p> */
          price?: components['parameters']['order_price']
          /** <p>Specifies how long the order remains in effect. Default `"good_til_cancelled"`</p> <ul> <li>`"good_til_cancelled"` - unfilled order remains in order book until cancelled</li> <li>`"fill_or_kill"` - execute a transaction immediately and completely or not at all</li> <li>`"immediate_or_cancel"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</li> </ul> */
          time_in_force?: components['parameters']['time_in_force']
          /** Maximum amount within an order to be shown to other customers, `0` for invisible order */
          max_show?: components['parameters']['max_show']
          /** <p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.</p> <p>Only valid in combination with time_in_force=`"good_til_cancelled"`</p> */
          post_only?: components['parameters']['post_only']
          /** If `true`, the order is considered reduce-only which is intended to only reduce a current position */
          reduce_only?: components['parameters']['reduce_only']
          /** Stop price, required for stop limit orders (Only for stop orders) */
          stop_price?: components['parameters']['stop_price']
          /** Defines trigger type, required for `"stop_limit"` order type */
          trigger?: components['parameters']['trigger']
          /** Advanced option order type. (Only for options) */
          advanced?: components['parameters']['advanced_order_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_buy_and_sell_response']
          }
        }
      }
    }
  }
  'private/get_positions': {
    get: {
      parameters: {
        query: {
          currency: components['schemas']['currency']
          /** Kind filter on positions */
          kind?: components['schemas']['kind']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_positions_response']
          }
        }
        /** When some error occurs */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/get_address_book': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Address book type */
          type: components['parameters']['address_book_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_address_book_response']
          }
        }
      }
    }
  }
  'private/toggle_subaccount_login': {
    get: {
      parameters: {
        query: {
          /** The user id for the subaccount */
          sid: number
          /** enable or disable login. */
          state: 'enable' | 'disable'
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/test': {
    get: {
      parameters: {
        query: {
          /** The value "exception" will trigger an error response. This may be useful for testing wrapper libraries. */
          expected_result?: 'exception'
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_test_response']
          }
        }
      }
    }
  }
  'private/unsubscribe': {
    get: {
      parameters: {
        query: {
          /** A list of channels to unsubscribe from. */
          channels: string[]
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_subscribe_response']
          }
        }
        /** not authorised */
        401: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'public/get_last_trades_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** The sequence number of the first trade to be returned */
          start_seq?: components['parameters']['optional_start_seq']
          /** The sequence number of the last trade to be returned */
          end_seq?: components['parameters']['optional_end_seq']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_trades_history_response']
          }
        }
      }
    }
  }
  'private/tradehistory': {
    get: {
      parameters: {
        query: {
          /** `"asc"` for ascending, `"desc"` for descending */
          sort?: string
          /** Either the name of the instrument, or `"all"` for instruments, `"futures"` for all futures, or `"options"` for all options. */
          instrument: string
          /** The number of trades returned (clamped to max 10000) */
          count?: number
          /** The ID of the first trade to be returned */
          startId?: number
          /** The ID of the last trade to be returned */
          endId?: number
          /** The trade sequence of the first trade to be returned */
          startSeq?: number
          /** The trade sequence of the last trade to be returned */
          endSeq?: number
          /** The timestamp (in ms) of the first trade to be returned */
          startTimestamp?: components['schemas']['timestamp']
          /** The timestamp (in ms) of the last trade to be returned */
          endTimestamp?: components['schemas']['timestamp']
          /** DEPRECATED, The ID after which trades are returned, for backward compatibility */
          since?: number
          /** DEPRECATED, alias to "sort", for backward compatibility */
          direction?: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_tradehistory_response']
          }
        }
      }
    }
  }
  'private/disable_cancel_on_disconnect': {
    get: {
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
        /** result when used via rest/HTTP */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/positions': {
    get: {
      parameters: {
        query: {
          /** Base currency to return positions for (`BTC`, `ETH` or all) */
          currency?: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_positions_response']
          }
        }
      }
    }
  }
  'private/get_position': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_position_response']
          }
        }
        /** When some error occurs */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/get_new_announcements': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['get_announcements_response']
          }
        }
      }
    }
  }
  'private/disable_tfa_for_subaccount': {
    get: {
      parameters: {
        query: {
          /** The user id for the subaccount */
          sid: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/get_user_trades_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** The ID number of the first trade to be returned */
          start_id?: components['parameters']['optional_start_trade_id']
          /** The ID number of the last trade to be returned */
          end_id?: components['parameters']['optional_end_trade_id']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['user_trades_history_response']
          }
        }
      }
    }
  }
  'private/get_transfers': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** The offset for pagination, default - `0` */
          offset?: components['parameters']['optional_offset']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_transfers_response']
          }
        }
      }
    }
  }
  'private/get_open_orders_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Order type, default - `all` */
          type?: components['parameters']['optional_order_type']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_open_orders_response']
          }
        }
      }
    }
  }
  'private/get_order_state': {
    get: {
      parameters: {
        query: {
          /** The order id */
          order_id: components['parameters']['order_id']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_order_state_response']
          }
        }
        /** result when used via rest/HTTP */
        400: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/withdraw': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Address in currency format, it must be in address book */
          address: components['parameters']['currency_address_from_address_book']
          /** Amount of funds to be withdrawn */
          amount: components['parameters']['withdrawal_currency_amount']
          /** Withdrawal priority, optional for BTC, default: `high` */
          priority?: components['parameters']['withdrawal_priority']
          /** TFA code, required when TFA is enabled for current account */
          tfa?: components['parameters']['tfa']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_withdraw_response']
          }
        }
      }
    }
  }
  'private/get_settlement_history_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Settlement type */
          type?: components['parameters']['optional_settlement_type']
          /** Number of requested items, default - `20` */
          count?: components['parameters']['optional_count20']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_settlement_response']
          }
        }
      }
    }
  }
  'private/get_deposits': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** The offset for pagination, default - `0` */
          offset?: components['parameters']['optional_offset']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_deposits_response']
          }
        }
      }
    }
  }
  'public/get_footer': {
    get: {
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_footer_response']
          }
        }
      }
    }
  }
  'private/get_user_trades_by_currency_and_time': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** The earliest timestamp to return result for */
          start_timestamp: components['parameters']['start_timestamp']
          /** The most recent timestamp to return result for */
          end_timestamp: components['parameters']['end_timestamp']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['user_trades_history_response']
          }
        }
      }
    }
  }
  'public/get_book_summary_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_book_summary_response']
          }
        }
      }
    }
  }
  'public/get_last_settlements_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Settlement type */
          type?: components['parameters']['optional_settlement_type']
          /** Number of requested items, default - `20` */
          count?: components['parameters']['optional_count20']
          /** Continuation token for pagination */
          continuation?: components['parameters']['continuation']
          /** The latest timestamp to return result for */
          search_start_timestamp?: components['parameters']['optional_settlement_start_timestamp']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['settlement_response']
          }
        }
      }
    }
  }
  'private/get_user_trades_by_instrument_and_time': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** The earliest timestamp to return result for */
          start_timestamp: components['parameters']['start_timestamp']
          /** The most recent timestamp to return result for */
          end_timestamp: components['parameters']['end_timestamp']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** Include trades older than 7 days, default - `false` */
          include_old?: components['parameters']['optional_include_old_trades']
          /** Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
          sorting?: components['parameters']['optional_sorting']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['user_trades_history_response']
          }
        }
      }
    }
  }
  'private/set_announcement_as_read': {
    get: {
      parameters: {
        query: {
          /** the ID of the announcement */
          announcement_id: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/get_settlement_history_by_currency': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Settlement type */
          type?: components['parameters']['optional_settlement_type']
          /** Number of requested items, default - `20` */
          count?: components['parameters']['optional_count20']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_settlement_response']
          }
        }
      }
    }
  }
  'public/set_heartbeat': {
    get: {
      parameters: {
        query: {
          /** The heartbeat interval in seconds, but not less than 10 */
          interval: number
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/get_subaccounts': {
    get: {
      parameters: {
        query: {
          with_portfolio?: boolean
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_subaccounts_response']
          }
        }
        /** not authorised */
        401: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/submit_transfer_to_subaccount': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Amount of funds to be transferred */
          amount: components['parameters']['transfer_currency_amount']
          /** Id of destination subaccount */
          destination: components['parameters']['transfer_destination_for_subaccount']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_submit_transfer_response']
          }
        }
      }
    }
  }
  'private/get_withdrawals': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Number of requested items, default - `10` */
          count?: components['parameters']['optional_count10']
          /** The offset for pagination, default - `0` */
          offset?: components['parameters']['optional_offset']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_withdrawals_response']
          }
        }
      }
    }
  }
  'public/get_index': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_index_response']
          }
        }
      }
    }
  }
  'public/ticker': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_ticker_response']
          }
        }
      }
    }
  }
  'private/get_account_summary': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Include additional fields */
          extended?: boolean
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_account_response']
          }
        }
      }
    }
  }
  'public/validate_field': {
    get: {
      parameters: {
        query: {
          /** Name of the field to be validated, examples: postal_code, date_of_birth */
          field: string
          /** Value to be checked */
          value: string
          /** Additional value to be compared with */
          value2?: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'private/toggle_deposit_address_creation': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          state: components['parameters']['boolean_state']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/get_instruments': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
          /** Instrument kind, if not provided instruments of all kinds are considered */
          kind?: components['parameters']['optional_kind']
          /** Set to true to show expired instruments instead of active ones. */
          expired?: boolean
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_instruments_response']
          }
        }
      }
    }
  }
  'private/cancel_all': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/get_time': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['get_time_response']
          }
        }
      }
    }
  }
  'private/getopenorders': {
    get: {
      parameters: {
        query: {
          /** Instrument to return open orders for */
          instrument?: string
          /** order ID */
          orderId?: number
          /** Order types to return. Valid values include `"limit"`, `"stop_limit"` */
          type?: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_getopenorders_response']
          }
        }
      }
    }
  }
  'public/get_announcements': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['get_announcements_response']
          }
        }
      }
    }
  }
  'private/toggle_notifications_from_subaccount': {
    get: {
      parameters: {
        query: {
          /** The user id for the subaccount */
          sid: number
          /** enable (`true`) or disable (`false`) notifications */
          state: boolean
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/get_last_settlements_by_instrument': {
    get: {
      parameters: {
        query: {
          /** Instrument name */
          instrument_name: components['parameters']['instrument_name']
          /** Settlement type */
          type?: components['parameters']['optional_settlement_type']
          /** Number of requested items, default - `20` */
          count?: components['parameters']['optional_count20']
          /** Continuation token for pagination */
          continuation?: components['parameters']['continuation']
          /** The latest timestamp to return result for */
          search_start_timestamp?: components['parameters']['optional_settlement_start_timestamp']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['settlement_response']
          }
        }
      }
    }
  }
  'private/set_email_for_subaccount': {
    get: {
      parameters: {
        query: {
          /** The user id for the subaccount */
          sid: number
          /** The email address for the subaccount */
          email: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['ok_response']
          }
        }
      }
    }
  }
  'public/auth': {
    /**
     * Retrieve an Oauth access token, to be used for authentication of 'private' requests.
     *
     * Three methods of authentication are supported:
     *
     * - <code>password</code> - using email and and password as when logging on to the website
     * - <code>client_credentials</code> - using the access key and access secret that can be found on the API page on the website
     * - <code>client_signature</code> - using the access key that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](#additional-authorization-method-deribit-signature-credentials)
     * - <code>refresh_token</code> - using a refresh token that was received from an earlier invocation
     *
     * The response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can
     * be used to get a new set of tokens.
     */
    get: {
      parameters: {
        query: {
          /** Method of authentication */
          grant_type: 'password' | 'client_credentials' | 'client_signature' | 'refresh_token'
          /** Required for grant type `password` */
          username: string
          /** Required for grant type `password` */
          password: string
          /** Required for grant type `client_credentials` and `client_signature` */
          client_id: string
          /** Required for grant type `client_credentials` */
          client_secret: string
          /** Required for grant type `refresh_token` */
          refresh_token: string
          /** Required for grant type `client_signature`, provides time when request has been generated */
          timestamp: string
          /** Required for grant type `client_signature`; it's a cryptographic signature calculated over provided fields using user **secret key**. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with `SHA256` hash algorithm */
          signature: string
          /** Optional for grant type `client_signature`; delivers user generated initialization vector for the server token */
          nonce?: string
          /** Will be passed back in the response */
          state?: string
          /** Describes type of the access for assigned token, possible values: `connection`, `session`, `session:name`, `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]` */
          scope?: string
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_auth_response']
          }
        }
        /** over limit */
        429: {
          content: {
            'application/json': components['schemas']['error_message']
          }
        }
      }
    }
  }
  'private/create_deposit_address': {
    get: {
      parameters: {
        query: {
          /** The currency symbol */
          currency: components['parameters']['currency']
        }
      }
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_deposit_address_response']
          }
        }
      }
    }
  }
  'public/get_trade_volumes': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['public_get_trades_volumes_response']
          }
        }
      }
    }
  }
  'private/get_email_language': {
    get: {
      parameters: {}
      responses: {
        /** foo */
        200: {
          content: {
            'application/json': components['schemas']['private_get_email_language_response']
          }
        }
      }
    }
  }
}

export interface components {
  schemas: {
    order_id_initial_margin_pair: {
      order_id: components['schemas']['order_id']
      /** @description Initial margin of order, in base currency */
      initial_margin: number
    }
    deribit_price_index_notification: {
      timestamp: components['schemas']['timestamp']
      /**
       * @description Current value of Deribit Index
       * @example 8247.27
       */
      price: number
      /** @example btc_usd */
      index_name: string
    }
    trade: {
      /** @description true if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that. */
      selfTrade: boolean
      /** @description Trade quantity */
      quantity: number
      /** @example 8358.12 */
      price: number
      /** @description Trade sequence number for the instrument */
      tradeSeq: number
      /** @description Matching order id */
      matchingId: number
      /** @description user defined label */
      label: string
    }
    public_get_option_mark_prices_response: {
      /** @description Object with instrument names as keys and two elements arrays as value. First element in array is mark price and second one is iv. */
      result: { [key: string]: unknown }
    }
    public_auth_response: {
      result: {
        /**
         * @description Authorization type, allowed value - `bearer`
         * @enum {string}
         */
        token_type: 'bearer'
        /** @description Copied from the input (if applicable) */
        state?: string
        /** @description Type of the access for assigned token */
        scope: string
        /** @example 843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7 */
        access_token: string
        /**
         * @description Token lifetime in seconds
         * @example 315360000
         */
        expires_in: number
        /**
         * @description Can be used to request a new token (with a new lifetime)
         * @example 6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91
         */
        refresh_token: string
      }
    }
    book_entry: {
      cumulative_amount: components['schemas']['cumulative_amount']
      amount: components['schemas']['amount']
      cumulative_quantity: components['schemas']['cumulative_quantity']
      price: components['schemas']['price']
      quantity: components['schemas']['quantity']
    }
    portfolio: {
      eth: components['schemas']['currency_portfolio']
      btc: components['schemas']['currency_portfolio']
    }
    settlement: {
      /**
       * @description total value of session profit and losses (in base currency)
       * @example 0.001160788
       */
      session_profit_loss: number
      /**
       * @description mark price for at the settlement time (in quote currency; settlement and delivery only)
       * @example 11000
       */
      mark_price?: number
      /**
       * @description funding (in base currency ; settlement for perpetual product only)
       * @example -0.000002511
       */
      funding: number
      /**
       * @description the amount of the socialized losses (in base currency; bankruptcy only)
       * @example -0.001160788
       */
      socialized?: number
      /**
       * @description value of session bankrupcy (in base currency; bankruptcy only)
       * @example 0.001160788
       */
      session_bankrupcy?: number
      timestamp: components['schemas']['timestamp']
      /**
       * @description profit and loss (in base currency; settlement and delivery only)
       * @example 0
       */
      profit_loss?: number
      /**
       * @description funded amount (bankruptcy only)
       * @example 0
       */
      funded?: number
      /**
       * @description underlying index price at time of event (in quote currency; settlement and delivery only)
       * @example 11008.37
       */
      index_price: number
      /**
       * @description total amount of paid taxes/fees (in base currency; bankruptcy only)
       * @example -0.001160788
       */
      session_tax?: number
      /**
       * @description rate of paid texes/fees (in base currency; bankruptcy only)
       * @example 0.000103333
       */
      session_tax_rate?: number
      /**
       * @description instrument name (settlement and delivery only)
       * @example BTC-30MAR18
       */
      instrument_name: string
      /**
       * @description position size (in quote currency; settlement and delivery only)
       * @example 1000
       */
      position: number
      type: components['schemas']['settlement_type']
    }
    private_orderhistory_response: {
      result: {
        /**
         * @description id of the order
         * @example 713637304
         */
        orderId: number
        /**
         * @description The timestamp (in ms) that the order was last updated
         * @example 1517614581664
         */
        lastUpdate: number
        /**
         * @description direction, `"buy"` or `"sell"`
         * @example buy
         */
        direction: string
        /**
         * @description Whether the stop order has been triggered (Only for future stop orders)
         * @example false
         */
        triggered: boolean
        /**
         * @description price
         * @example 10100
         */
        price: number
        /**
         * @description The number of contracts already filled
         * @example 700
         */
        filledQuantity: number
        /**
         * @description average fill price of the order
         * @example 10100
         */
        avgPrice: number
        /**
         * @description true - created with API
         * @example true
         */
        api: boolean
        /**
         * @description Defines trigger type, required for stop limit orders, possible values `"index_price"`, `"mark_price"`  (Only valid for stop orders)
         * @example index_price
         */
        execInst: string
        /**
         * @description Option implied volatility in percent. (Only when `adv=implv`)
         * @example 250
         */
        implv: number
        /**
         * @description advanced type (`false`, or `"usd"` or `"implv"`)
         * @example false
         */
        adv: boolean
        /**
         * @description Option price in USD (Only if `adv=usd`)
         * @example 50
         */
        usd: number
        /**
         * @description stop price (Only for future stop orders)
         * @example 10000
         */
        stopPx: number
        /**
         * @description Commission paid so far (in BTC)
         * @example 0
         */
        commission: number
        /**
         * @description Maximum quantity within an order to be shown to other customers, 0 for invisible order.
         * @example 1
         */
        max_show: number
        /**
         * @description The timestamp (in ms) that the order was created
         * @example 1517614581664
         */
        created: number
        /**
         * @description true for post-only orders only
         * @example true
         */
        postOnly: boolean
        /**
         * @description user defined label (up to 32 characters)
         * @example MyOrder
         */
        label: string
        /**
         * @description instrument name of the order
         * @example BTC-23FEB18
         */
        instrument: string
        /**
         * @description order state
         * @example open
         */
        state: string
        /**
         * @description order type, `"limit"`, `"market"`, `"stop_limit"`
         * @example limit
         */
        type: string
        /**
         * @description The number of contracts to be traded
         * @example 1000
         */
        quantity: number
      }
    }
    private_get_positions_response: {
      result: components['schemas']['position'][]
    }
    ticker_notification_with_bids_and_asks: {
      best_bid_amount: components['schemas']['best_bid_amount']
      best_ask_amount: components['schemas']['best_ask_amount']
      timestamp: components['schemas']['timestamp']
      last_price: components['schemas']['last_price']
      delivery_price?: components['schemas']['delivery_price']
      underlying_price?: components['schemas']['underlying_price']
      ask_iv?: components['schemas']['ask_iv']
      best_bid_price: components['schemas']['best_bid_price']
      open_interest: components['schemas']['open_interest']
      funding_8h?: components['schemas']['funding_8h']
      bid_iv?: components['schemas']['bid_iv']
      underlying_index?: components['schemas']['underlying_index']
      mark_price: components['schemas']['mark_price']
      stats: components['schemas']['stats']
      asks: components['schemas']['asks']
      mark_iv?: components['schemas']['mark_iv']
      greeks?: components['schemas']['greeks']
      interest_rate?: components['schemas']['interest_rate']
      settlement_price?: components['schemas']['settlement_price']
      bids: components['schemas']['bids']
      index_price: components['schemas']['index_price']
      state: components['schemas']['book_state']
      min_price: components['schemas']['min_price']
      instrument_name: components['schemas']['instrument_name']
      best_ask_price: components['schemas']['best_ask_price']
      max_price: components['schemas']['max_price']
      current_funding?: components['schemas']['current_funding']
    }
    mark_price_info: {
      /**
       * @description mark_price of instrument
       * @example 0.0455
       */
      mark_price?: number
      /**
       * @description instrument name
       * @example BTC-27JUL18
       */
      instrument_name?: string
      /**
       * @description implied volatility of mark price
       * @example 1.23
       */
      iv?: number
    }
    instrument: {
      /**
       * @description The currency in which the instrument prices are quoted.
       * @enum {string}
       */
      quote_currency: 'USD'
      kind: components['schemas']['kind']
      /**
       * @description specifies minimal price change and, as follows, the number of decimal places for instrument prices
       * @example 0.0001
       */
      tick_size: number
      /**
       * @description Contract size for instrument
       * @example 1
       */
      contract_size: number
      /** @description Indicates if the instrument can currently be traded. */
      is_active: boolean
      /**
       * @description The option type (only for options)
       * @enum {string}
       */
      option_type?: 'call' | 'put'
      /**
       * @description Minimum amount for trading. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.
       * @example 0.1
       */
      min_trade_amount: number
      instrument_name: components['schemas']['instrument_name']
      /**
       * @description The settlement period.
       * @enum {string}
       */
      settlement_period: 'month' | 'week' | 'perpetual'
      /** @description The strike value. (only for options) */
      strike?: number
      /**
       * @description The underlying currency being traded.
       * @enum {string}
       */
      base_currency: 'BTC' | 'ETH'
      /**
       * @description The time when the instrument was first created (milliseconds)
       * @example 1536569522277
       */
      creation_timestamp: number
      /** @description The time when the instrument will expire (milliseconds) */
      expiration_timestamp: number
    }
    private_get_order_state_response: {
      result: components['schemas']['order']
    }
    public_index_response: {
      result: {
        /**
         * @description Estimated delivery price for the currency. For more details, see Documentation > General > Expiration Price
         * @example 11628.81
         */
        edp: number
        /**
         * @description The current index price for ETH-USD (only for selected currency == ETH)
         * @example 328.81
         */
        ETH?: number
        /**
         * @description The current index price for BTC-USD (only for selected currency == BTC)
         * @example 11628.81
         */
        BTC: number
      }
    }
    order_v1: {
      direction: components['schemas']['direction']
      triggered?: components['schemas']['triggered']
      order_id: components['schemas']['order_id']
      price: components['schemas']['price']
      api: components['schemas']['api']
      order_state: components['schemas']['order_state']
      last_update: components['schemas']['timestamp']
      implv?: components['schemas']['implv']
      advanced?: components['schemas']['advanced']
      post_only: components['schemas']['post_only']
      usd?: components['schemas']['usd']
      stop_price?: components['schemas']['stop_price']
      order_type: components['schemas']['order_type']
      /** @example ETH-PERPETUAL */
      instrument: string
      max_show: components['schemas']['max_show']
      created: components['schemas']['timestamp']
      label: components['schemas']['label']
      commission?: components['schemas']['commission']
      trigger?: components['schemas']['trigger']
      filled_quantity?: components['schemas']['filled_quantity']
      average_price?: components['schemas']['average_price']
      quantity?: components['schemas']['quantity']
    }
    public_currencies_response: {
      result: components['schemas']['currency'][]
    }
    book_summary: {
      /**
       * @description Name of the underlying future, or `'index_price'` (options only)
       * @example index_price
       */
      underlying_index?: string
      /**
       * @description The total 24h traded volume (in base currency)
       * @example 223
       */
      volume: number
      /**
       * @description Volume in usd (futures only)
       * @example 102
       */
      volume_usd?: number
      /**
       * @description underlying price for implied volatility calculations (options only)
       * @example 6745.34
       */
      underlying_price?: number
      /**
       * @description The current best bid price, `null` if there aren't any bids
       * @example 7022.89
       */
      bid_price: number
      /**
       * @description The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.
       * @example 0.5
       */
      open_interest: number
      /**
       * @description Quote currency
       * @example USD
       */
      quote_currency: string
      /**
       * @description Price of the 24h highest trade
       * @example 7022.89
       */
      high: number
      /**
       * @description Estimated delivery price, in USD (futures only). For more details, see Documentation > General > Expiration Price
       * @example 10029.5
       */
      estimated_delivery_price?: number
      /**
       * @description The price of the latest trade, `null` if there weren't any trades
       * @example 7022.89
       */
      last: number
      /**
       * @description The average of the best bid and ask, `null` if there aren't any asks or bids
       * @example 7022.89
       */
      mid_price: number
      /**
       * @description Interest rate used in implied volatility calculations (options only)
       * @example 0
       */
      interest_rate?: number
      /** @description Funding 8h (perpetual only) */
      funding_8h?: number
      /**
       * @description The current instrument market price
       * @example 7022.89
       */
      mark_price: number
      /**
       * @description The current best ask price, `null` if there aren't any asks
       * @example 7022.89
       */
      ask_price: number
      instrument_name: components['schemas']['instrument_name']
      /**
       * @description Price of the 24h lowest trade, `null` if there weren't any trades
       * @example 7022.89
       */
      low: number
      /**
       * @description Base currency
       * @example ETH
       */
      base_currency: string
      creation_timestamp: components['schemas']['timestamp']
      /**
       * @description Current funding (perpetual only)
       * @example 0.12344
       */
      current_funding?: number
    }
    private_deposit_address_response: {
      /** @description Object if address is created, null otherwise */
      result: {
        currency: components['schemas']['currency']
        address: components['schemas']['currency_address']
        type: components['schemas']['wallet_address_type']
        creation_timestamp: components['schemas']['timestamp']
      }
    }
    public_trade: {
      /** @description Trade direction of the taker */
      direction: components['schemas']['direction']
      tick_direction: components['schemas']['tick_direction']
      /**
       * @description The timestamp of the trade
       * @example 1517329113791
       */
      timestamp: number
      /** @description The price of the trade */
      price: components['schemas']['price']
      trade_seq: components['schemas']['trade_seq']
      trade_id: components['schemas']['trade_id']
      /** @description Option implied volatility for the price (Option only) */
      iv?: number
      /** @description Index Price at the moment of trade */
      index_price: number
      /** @description Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. */
      amount: number
      instrument_name: components['schemas']['instrument_name']
    }
    private_settlementhistory_response: {
      result: {
        /**
         * @description position size  (settlement and delivery only)
         * @example 1000
         */
        position: string
        /**
         * @description The amount of the losses socialized
         * @example -3e-9
         */
        socialized: number
        /**
         * @description The timestamp of the settlement
         * @example 1517299201923
         */
        timeStamp: number
        /** @example 4.17243092 */
        sessionProfitLoss: string
        /**
         * @description Funded amount (bankruptcy only)
         * @example 0
         */
        funded: string
        /**
         * @description instrument name (settlement and delivery only)
         * @example BTC-30MAR18
         */
        instrument: string
        /**
         * @description in BTC
         * @example 0.001160788
         */
        sessionBankrupcy: number
        /**
         * @description profit and loss (settlement and delivery only)
         * @example 0
         */
        profitLoss: number
        /**
         * @description in BTC
         * @example 0.000103333
         */
        sessionTaxRate: number
        /**
         * @description in BTC
         * @example -3e-9
         */
        sessionTax: number
        /**
         * @description Mark price for at the time  (settlement and delivery only)
         * @example 11000
         */
        markPrice: number
        type: components['schemas']['settlement_type']
        /**
         * @description Underlying index price at time of event (settlement and delivery only)
         * @example 11008.37
         */
        indexPrice: number
      }
    }
    get_announcements_response: {
      result: {
        /**
         * @description The HTML body of the announcement
         * @example An&nbsp;announcement
         */
        body: string
        /**
         * @description The timestamp in ms at which the announcement was published
         * @example 1527844253000
         */
        publication_time: number
        /**
         * @description Whether the announcement is marked as important
         * @example false
         */
        important: boolean
        /**
         * @description A unique identifier for the announcement
         * @example 19288317
         */
        id: number
        /**
         * @description The title of the announcement
         * @example Example announcement
         */
        title: string
      }[]
    }
    public_get_trades_volumes_response: {
      result: components['schemas']['trades_volumes'][]
    }
    private_subscribe_response: {
      /** @description A list of subscribed channels. */
      result: string[]
    }
    private_getopenorders_response: {
      result: {
        /**
         * @description id of the order
         * @example 713637304
         */
        orderId: number
        /**
         * @description The timestamp (in ms) that the order was last updated
         * @example 1517614581664
         */
        lastUpdate: number
        /**
         * @description direction, `"buy"` or `"sell"`
         * @example buy
         */
        direction: string
        /**
         * @description Whether the stop order has been triggered (Only for future stop orders)
         * @example false
         */
        triggered: boolean
        /**
         * @description price
         * @example 10100
         */
        price: number
        /**
         * @description The number of contracts already filled
         * @example 700
         */
        filledQuantity: number
        /**
         * @description average fill price of the order
         * @example 10100
         */
        avgPrice: number
        /**
         * @description true - created with API
         * @example true
         */
        api: boolean
        /**
         * @description Defines trigger type, required for stop limit orders, possible values `"index_price"`, `"mark_price"`  (Only valid for stop orders)
         * @example index_price
         */
        execInst: string
        /**
         * @description Option implied volatility in percent. (Only when `adv=implv`)
         * @example 250
         */
        implv: number
        /**
         * @description advanced type (`false`, or `usd` or `implv`)
         * @example false
         */
        adv: boolean
        /**
         * @description Option price in USD (Only if `adv=usd`)
         * @example 50
         */
        usd: number
        /**
         * @description stop price (Only for future stop orders)
         * @example 10000
         */
        stopPx: number
        /**
         * @description Commission paid so far (in BTC)
         * @example 0
         */
        commission: number
        /**
         * @description Maximum quantity within an order to be shown to other customers, 0 for invisible order.
         * @example 1
         */
        max_show: number
        /**
         * @description The timestamp (in ms) that the order was created
         * @example 1517614581664
         */
        created: number
        /**
         * @description `true` for post-only orders only
         * @example true
         */
        postOnly: boolean
        /**
         * @description user defined label (up to 32 characters)
         * @example MyOrder
         */
        label: string
        /**
         * @description instrument name of the order
         * @example BTC-23FEB18
         */
        instrument: string
        /**
         * @description order state
         * @example open
         */
        state: string
        /**
         * @description order type, `"limit"`,` "market"`, `"stop_limit"`
         * @example limit
         */
        type: string
        /**
         * @description The number of contracts to be traded
         * @example 1000
         */
        quantity: number
      }
    }
    public_get_order_book_response: {
      result: components['schemas']['ticker_notification_with_bids_and_asks']
    }
    private_cancel_response: {
      result: components['schemas']['order']
    }
    private_positions_response: {
      result: {
        /**
         * @description The direction of the position. Can be "buy" (long) or "sell" (short)
         * @example buy
         */
        direction: string
        /**
         * @description position size in BTC (0 if currency <>`BTC`)
         * @example 7.14775214
         */
        sizeBtc: number
        /**
         * @description The settlement price for the instrument
         * @example 9145.26
         */
        settlementPrice: number
        /**
         * @description position size in the base currency for the instrument
         * @example 7.14775214
         */
        sizeCurrency: number
        /**
         * @description The base currency of the instrument
         * @example BTC
         */
        currency: string
        /**
         * @description floating PnL
         * @example -0.703874042
         */
        floatingPl: number
        /**
         * @description The position delta
         * @example 7.14775214
         */
        delta: number
        /**
         * @description index price
         * @example 8242.12
         */
        indexPrice: number
        /**
         * @description The position size in contracts. Can be negative (short) or positive (long)
         * @example 5893
         */
        size: number
        /**
         * @description The type of instrument. "future" or "option"
         * @example future
         */
        kind: string
        /**
         * @description The margin used to back the position
         * @example 0
         */
        openOrderMargin: number
        /**
         * @description Estimated liquidation price
         * @example 99999.99
         */
        estLiqPrice: number
        /**
         * @description realized PnL
         * @example 0,
         */
        realizedPl: number
        /**
         * @description name of the instrument
         * @example "BTC-30MAR18"
         */
        instrument: string
        /**
         * @description initial margin
         * @example 0.357387607
         */
        initialMargin: number
        /**
         * @description The PnL for the position
         * @example -1.068422015
         */
        profitLoss: number
        /**
         * @description mark price
         * @example 8244.55
         */
        markPrice: number
        /**
         * @description average price for the position
         * @example 9693.502194671
         */
        averagePrice: number
        /**
         * @description maintenance margin
         * @example 0.214432564
         */
        maintenanceMargin: number
      }
    }
    private_get_email_language_response: {
      /**
       * @description The abbreviation of the language
       * @example en
       */
      result: string
    }
    user_trades_by_order_response: components['schemas']['user_trade'][]
    private_get_order_history_response: {
      result: components['schemas']['order'][]
    }
    base_message: {
      /** @description false for production server, true for test server */
      testnet: boolean
      /**
       * @description The JSON-RPC version (2.0)
       * @enum {string}
       */
      jsonrpc: '2.0'
      /** @description Duration of the handling of the request, in microseconds */
      usDiff: number
      /** @description The id that was sent in the request */
      id?: number
      /** @description The timestamp (in microseconds) of sending of the response */
      usOut: number
      /** @description The timestamp (in microseconds) of receipt of the request */
      usIn: number
    }
    public_get_contract_size_response: {
      result: {
        contract_size: components['schemas']['contract_size']
      }
    }
    private_get_margins_response: {
      result: {
        /**
         * @description Margin when selling
         * @example 0.01680479
         */
        sell: number
        /**
         * @description Margin when buying
         * @example 0.01681367
         */
        buy: number
        min_price: components['schemas']['min_price']
        max_price: components['schemas']['max_price']
      }
    }
    /**
     * @description Currency, i.e `"BTC"`, `"ETH"`
     * @enum {string}
     */
    currency: 'BTC' | 'ETH'
    private_get_open_orders_response: {
      result: components['schemas']['order'][]
    }
    error_message: {
      message: string
      error: number
    }
    private_withdraw_response: {
      result: components['schemas']['withdrawal']
    }
    withdrawal: {
      updated_timestamp: components['schemas']['timestamp']
      fee?: components['schemas']['fee']
      /**
       * @description The timestamp (seconds since the Unix epoch, with millisecond precision) of withdrawal confirmation, `null` when not confirmed
       * @example 1536569522277
       */
      confirmed_timestamp: number
      amount: components['schemas']['currency_amount']
      /**
       * @description Id of priority level
       * @example 1
       */
      priority?: number
      currency: components['schemas']['currency']
      state: components['schemas']['withdrawal_state']
      address: components['schemas']['currency_address']
      created_timestamp?: components['schemas']['timestamp']
      /**
       * @description Withdrawal id in Deribit system
       * @example 1
       */
      id?: number
      transaction_id: components['schemas']['currency_transaction_id']
    }
    perpetual_notification: {
      /** @description Current interest */
      interest: number
    }
    markprice_options_notification: {
      mark_price?: components['schemas']['mark_price']
      instrument_name?: components['schemas']['instrument_name']
      iv?: components['schemas']['implied_volatility']
    }[]
    user_portfolio_notification: {
      /**
       * @description The sum of position deltas
       * @example 0.1334
       */
      delta_total: number
      /**
       * @description Session realized profit and loss
       * @example 0.1
       */
      session_rpl: number
      /**
       * @description Options summary gamma
       * @example 0
       */
      options_gamma: number
      /**
       * @description Options summary vega
       * @example 0
       */
      options_vega: number
      /**
       * @description Futures session realized profit and Loss
       * @example 0
       */
      futures_session_rpl: number
      /**
       * @description Options summary theta
       * @example 0
       */
      options_theta: number
      /**
       * @description Session unrealized profit and loss
       * @example 0.846863
       */
      session_upl: number
      /**
       * @description Options profit and Loss
       * @example 0
       */
      options_pl: number
      /**
       * @description The selected currency
       * @example ETH
       */
      currency: string
      /**
       * @description When `true` portfolio margining is enabled for user
       * @example true
       */
      portfolio_margining_enabled: boolean
      /**
       * @description The account's margin balance
       * @example 2.25
       */
      margin_balance: number
      /**
       * @description Futures session unrealized profit and Loss
       * @example 0
       */
      futures_session_upl: number
      /**
       * @description Profit and loss
       * @example 0.02032221
       */
      total_pl: number
      /**
       * @description Projected maintenance margin (for portfolio margining users)
       * @example 1
       */
      projected_maintenance_margin?: number
      /**
       * @description The account's initial margin
       * @example 0.379882
       */
      initial_margin: number
      /**
       * @description Futures profit and Loss
       * @example 0
       */
      futures_pl: number
      /**
       * @description The maintenance margin.
       * @example 0.1334519
       */
      maintenance_margin: number
      /**
       * @description The account's available to withdrawal funds
       * @example 2.26
       */
      available_withdrawal_funds: number
      /**
       * @description Options session realized profit and Loss
       * @example 0
       */
      options_session_rpl: number
      /**
       * @description Options session unrealized profit and Loss
       * @example 0
       */
      options_session_upl: number
      /**
       * @description Session funding
       * @example 0
       */
      session_funding: number
      /**
       * @description The account's available funds
       * @example 2.2638913
       */
      available_funds: number
      /**
       * @description The account's current equity
       * @example 2.6437733
       */
      equity: number
      /**
       * @description Projected initial margin (for portfolio margining users)
       * @example 1
       */
      projected_initial_margin?: number
      /**
       * @description The account's balance
       * @example 3.4906363
       */
      balance: number
      /**
       * @description Options summary delta
       * @example 0
       */
      options_delta: number
    }
    private_create_subaccount_response: {
      result: {
        /** @description System generated user nickname */
        system_name: string
        /** @description Account name (given by user) */
        username: string
        /** @description `true` when password for the subaccount has been configured */
        is_password: boolean
        /** @description Informs whether login to the subaccount is enabled */
        login_enabled: boolean
        /** @description Whether the two factor authentication is enabled */
        tfa_enabled: boolean
        /** @description When `true` - receive all notification emails on the main email */
        receive_notifications: boolean
        /**
         * @description User email
         * @example user_ABC@deribit.com
         */
        email: string
        portfolio?: components['schemas']['portfolio']
        /**
         * @description Account type
         * @enum {string}
         */
        type: 'subaccount'
        /** @description Subaccount identifier */
        id: number
      }
    }
    trades_volumes: {
      /**
       * @description Total 24h trade volume for call options. This is expressed in the base currency, e.g. BTC for `btc_usd`
       * @example 2.1
       */
      calls_volume: number
      /**
       * @description Total 24h trade volume for put options. This is expressed in the base currency, e.g. BTC for `btc_usd`
       * @example 60.2
       */
      puts_volume: number
      /**
       * @description Currency pair: `"btc_usd"` or `"eth_usd"`
       * @enum {string}
       */
      currency_pair: 'btc_usd' | 'eth_usd'
      /**
       * @description Total 24h trade volume for futures. This is expressed in the base currency, e.g. BTC for `btc_usd`
       * @example 30.5178
       */
      futures_volume: number
    }
    private_get_withdrawals_response: {
      result: {
        count: components['schemas']['result_count']
        data: components['schemas']['withdrawal'][]
      }
    }
    public_get_book_summary_response: {
      result: components['schemas']['book_summary'][]
    }
    currency_portfolio: {
      maintenance_margin: number
      available_withdrawal_funds: number
      initial_margin: number
      available_funds: number
      /** @enum {string} */
      currency: 'btc' | 'eth'
      margin_balance: number
      equity: number
      balance: number
    }
    private_get_order_margin_by_ids_response: {
      result: components['schemas']['order_id_initial_margin_pair'][]
    }
    private_ask_to_address_book_response: {
      result: components['schemas']['address_book_item']
    }
    announcement_notification: {
      body: string
      /**
       * @description milliseconds since the Unix epoch
       * @example 1532593832021
       */
      date: number
      important: boolean
      title: string
      action?: string
      number?: number
      id: number
    }
    ok_response: {
      /**
       * @description Result of method execution. `ok` in case of success
       * @enum {string}
       */
      result: 'ok'
    }
    get_time_response: {
      /**
       * @description Current timestamp (milliseconds)
       * @example 1517329113791
       */
      result: number
    }
    public_get_instruments_response: {
      result: components['schemas']['instrument'][]
    }
    estimated_expiration_price_notification: {
      /** @description Number of seconds till finalizing the nearest instrument */
      seconds: number
      /**
       * @description Index current or estimated price
       * @example 8247.27
       */
      price: number
      /** @description When `true` then prize is given as an estimated value, otherwise it's current index price */
      is_estimated: boolean
    }
    private_buy_and_sell_response: {
      result: {
        trades: components['schemas']['user_trade'][]
        order: components['schemas']['order']
      }
    }
    ticker_notification: {
      best_bid_amount: components['schemas']['best_bid_amount']
      best_ask_amount: components['schemas']['best_ask_amount']
      timestamp: components['schemas']['timestamp']
      last_price: components['schemas']['last_price']
      delivery_price?: components['schemas']['delivery_price']
      underlying_price?: components['schemas']['underlying_price']
      ask_iv?: components['schemas']['ask_iv']
      best_bid_price: components['schemas']['best_bid_price']
      open_interest: components['schemas']['open_interest']
      bid_iv?: components['schemas']['bid_iv']
      underlying_index?: components['schemas']['underlying_index']
      mark_price: components['schemas']['mark_price']
      stats: components['schemas']['stats']
      mark_iv?: components['schemas']['mark_iv']
      greeks?: components['schemas']['greeks']
      interest_rate?: components['schemas']['interest_rate']
      settlement_price?: components['schemas']['settlement_price']
      funding_8h?: components['schemas']['funding_8h']
      index_price: components['schemas']['index_price']
      state: components['schemas']['book_state']
      min_price: components['schemas']['min_price']
      instrument_name: components['schemas']['instrument_name']
      best_ask_price: components['schemas']['best_ask_price']
      max_price: components['schemas']['max_price']
      current_funding?: components['schemas']['current_funding']
    }
    private_tradehistory_response: {
      result: {
        /**
         * @description Trade direction of the taker
         * @example buy
         */
        direction: string
        /**
         * @description The ID for the trade
         * @example 49366
         */
        tradeId: string
        /**
         * @description The quantity traded
         * @example 5
         */
        quantity: string
        /**
         * @description The timestamp of the trade in ms
         * @example 1503439494351
         */
        timeStamp: number
        /**
         * @description The price of the trade
         * @example 0.055
         */
        price: string
        /**
         * @description option implied volatility for the price (Options only)
         * @example 70.71
         */
        iv: string
        /**
         * @description The name of the instrument
         * @example BTC-25AUG17-3900-C
         */
        instrument: string
        /**
         * @description Index price at trade
         * @example 4101.46
         */
        indexPrice: string
        /**
         * @description Direction of the "tick".
         * @example 1
         */
        tickDirection: string
        /**
         * @description The trade sequence number
         * @example 1
         */
        tradeSeq: string
      }
    }
    private_get_transfers_response: {
      result: {
        count: components['schemas']['result_count']
        data: components['schemas']['transfer_item'][]
      }
    }
    private_orderstate_response: {
      result: {
        /**
         * @description id of the order
         * @example 713637304
         */
        orderId: number
        /**
         * @description The timestamp (in ms) that the order was last updated
         * @example 1517614581664
         */
        lastUpdate: number
        /**
         * @description direction, "buy" or "sell"
         * @example buy
         */
        direction: string
        /**
         * @description Whether the stop order has been triggered (Only for future stop orders)
         * @example false
         */
        triggered: boolean
        /**
         * @description price
         * @example 10100
         */
        price: number
        /**
         * @description The number of contracts already filled
         * @example 700
         */
        filledQuantity: number
        /**
         * @description average fill price of the order
         * @example 10100
         */
        avgPrice: number
        /**
         * @description true - created with API
         * @example true
         */
        api: boolean
        /**
         * @description Defines trigger type, required for stop limit orders, possible values `"index_price"`, `"mark_price"`  (Only valid for stop orders)
         * @example index_price
         */
        execInst: string
        /**
         * @description Option implied volatility in percent. (Only when `adv=implv`)
         * @example 250
         */
        implv: number
        /**
         * @description advanced type (`false`, or `"usd"` or `"implv"`)
         * @example false
         */
        adv: boolean
        /**
         * @description Option price in USD (Only if `adv=usd`)
         * @example 50
         */
        usd: number
        /**
         * @description stop price (Only for future stop orders)
         * @example 10000
         */
        stopPx: number
        /**
         * @description Commission paid so far (in BTC)
         * @example 0
         */
        commission: number
        /**
         * @description Maximum quantity within an order to be shown to other customers, 0 for invisible order.
         * @example 1
         */
        max_show: number
        /**
         * @description The timestamp (in ms) that the order was created
         * @example 1517614581664
         */
        created: number
        /**
         * @description true for post-only orders only
         * @example true
         */
        postOnly: boolean
        /**
         * @description user defined label (up to 32 characters)
         * @example MyOrder
         */
        label: string
        /**
         * @description instrument name of the order
         * @example BTC-23FEB18
         */
        instrument: string
        /**
         * @description order state
         * @example open
         */
        state: string
        /**
         * @description order type, `"limit"`, `"market"`, `"stop_limit"`
         * @example limit
         */
        type: string
        /**
         * @description The number of contracts to be traded
         * @example 1000
         */
        quantity: number
      }
    }
    book_notification_raw: {
      /** @description id of the previous notification */
      prev_change_id?: number
      instrument_name: components['schemas']['instrument_name']
      asks: number[][]
      timestamp?: components['schemas']['timestamp_for_book_notifications']
      /** @description id of the notification */
      change_id: number
      bids: number[][]
    }
    book_notification: {
      /** @description id of the notification */
      change_id: number
      instrument_name: components['schemas']['instrument_name']
      bids: number[][]
      asks: number[][]
      timestamp?: components['schemas']['timestamp_for_book_notifications']
    }
    private_submit_transfer_response: {
      result: components['schemas']['transfer_item']
    }
    public_getorderbook_response: {
      result: {
        /**
         * @description The settlement price for this instrument. Only when `state=open`
         * @example 11013.37
         */
        settlementPrice: number
        /**
         * @description (Only for option) implied volatility for best bid
         * @example 109.99
         */
        bidIv: number
        /**
         * @description The cumulative quantity
         * @example 800
         */
        cm: number
        /** @description (Only for futures) The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum. */
        max: number
        /**
         * @description The price level
         * @example 10322.5
         */
        price: number
        /** @description (Only for options)The order id of an unfilled order you have at this price. This field only shows if you have an order at this price level, and the request has been [signed](rpc-authentication.md). */
        oid: number
        /**
         * @description The 24h high for the instrument
         * @example 10916.03
         */
        high: number
        /**
         * @description (Only for option) underlying future instrument name or `"index_price"`
         * @example "BTC-30MAR18"
         */
        uIx: number
        /**
         * @description (Only for option) underlying price used for ask/bid implied volatility
         * @example 10408.16
         */
        uPx: number
        /**
         * @description (Only for options) The delta value for the option
         * @example -.35199
         */
        delta: number
        /**
         * @description The order book timestamp in milliseconds
         * @example 1517329113791
         */
        tstamp: number
        /**
         * @description The price for the last trade
         * @example 10350
         */
        last: number
        /**
         * @description The list of all asks, best ask first. See below for entry details
         * @example (see below)
         */
        asks: unknown[]
        /** @description (Only for futures) The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum. */
        min: number
        /**
         * @description (Only for option) implied volatility for mark price
         * @example 135
         */
        markIv: number
        /**
         * @description (Only for option) Interest rate used for implied volatility calculations
         * @example 0
         */
        iR: number
        /**
         * @description The list of all bids, best bid first. See below for entry details
         * @example (see below)
         */
        bids: string[]
        /**
         * @description The mark price for the instrument
         * @example 10334.06
         */
        mark: number
        /**
         * @description The name of the instrument.
         * @example BTC-23FEB18
         */
        instrument: string
        /**
         * @description The state of the order book. Possible values are `"open"` and `"closed"`.
         * @example open
         */
        state: string
        /**
         * @description (Only for option) The vega value for the option
         * @example 11.98132
         */
        vega: number
        /**
         * @description The 24h low for the instrument
         * @example 10296.11
         */
        low: number
        /**
         * @description (Only for option) The theta value for the option
         * @example -6.7319
         */
        theta: number
        /**
         * @description (Only for option) implied volatility for best ask
         * @example 130.06
         */
        askIv: number
        /**
         * @description The settlement price for this instrument. Only when `state=closed`
         * @example 11013.37
         */
        deliveryPrice: number
        /**
         * @description (Only for options) The gamma value for the option
         * @example 0.00011
         */
        gamma: number
        /**
         * @description The total quantity of orders for this price level
         * @example 800
         */
        quantity: number
      }
    }
    private_get_deposits_response: {
      result: {
        count: components['schemas']['result_count']
        data: components['schemas']['deposit'][]
      }
    }
    private_get_subaccounts_response: {
      result: {
        username: string
        /** @description System generated user nickname */
        system_name: string
        /** @description `true` when password for the subaccount has been configured */
        is_password: boolean
        /** @enum {string} */
        type: 'main' | 'subaccount'
        /** @description Whether the two factor authentication is enabled */
        tfa_enabled: boolean
        /** @description When `true` - receive all notification emails on the main email */
        receive_notifications: boolean
        /** @description Account/Subaccount identifier */
        id: number
        /** @description New email address that has not yet been confirmed. This field is only included if `with_portfolio` == `true`. */
        not_confirmed_email?: string
        /** @description Only if with_portfolio == true */
        portfolio?: components['schemas']['portfolio']
        /** @description Informs whether login to the subaccount is enabled */
        login_enabled?: boolean
        /** @description User email */
        email: string
      }[]
    }
    transfer_item: {
      updated_timestamp: components['schemas']['timestamp']
      direction?: components['schemas']['transfer_direction']
      amount: components['schemas']['currency_amount']
      other_side: components['schemas']['transfer_other_side']
      currency: components['schemas']['currency']
      state: components['schemas']['transfer_state']
      created_timestamp: components['schemas']['timestamp']
      type: components['schemas']['transfer_type']
      id: components['schemas']['transfer_id']
    }
    private_settlement_response: {
      result: string[]
    }
    public_get_footer_response: {
      result: {
        title_zh?: string
        name: string
        title_ru?: string
        title_ko?: string
        type: string
        title_ja?: string
        title_en: string
      }[]
    }
    public_getlasttrades_response: {
      result: {
        /**
         * @description Trade direction of the taker
         * @example buy
         */
        direction: string
        /**
         * @description The ID for the trade
         * @example 49366
         */
        tradeId: string
        /**
         * @description The quantity traded
         * @example 5
         */
        quantity: string
        /**
         * @description The timestamp of the trade in ms
         * @example 1503439494351
         */
        timeStamp: number
        /**
         * @description The price of the trade
         * @example 0.055
         */
        price: string
        /**
         * @description option implied volatility for the price (Options only)
         * @example 70.71
         */
        iv: string
        /**
         * @description The name of the instrument
         * @example BTC-25AUG17-3900-C
         */
        instrument: string
        /**
         * @description Index price at trade
         * @example 4101.46
         */
        indexPrice: string
        /**
         * @description Direction of the "tick". 0 = Plus Tick, 1 = Zero-Plus Tick, 2 = Minus Tick, 3 = Zero-Minus Tick
         * @example 1
         */
        tickDirection: string
        /**
         * @description The trade sequence number
         * @example 1
         */
        tradeSeq: string
      }
    }
    public_historical_volatility_response: {
      result: string[]
    }
    private_account_response: {
      result: {
        /**
         * @description Session realized profit and loss
         * @example 0.1
         */
        session_rpl: number
        /**
         * @description Futures profit and Loss
         * @example 0
         */
        futures_pl: number
        /**
         * @description Options summary vega
         * @example 0
         */
        options_vega: number
        /**
         * @description Session unrealized profit and loss
         * @example 0.846863
         */
        session_upl: number
        /**
         * @description The selected currency
         * @example ETH
         */
        currency: string
        /**
         * @description `true` when portfolio margining is enabled for user
         * @example true
         */
        portfolio_margining_enabled?: boolean
        /**
         * @description The account's margin balance
         * @example 2.25
         */
        margin_balance?: number
        /**
         * @description Futures session unrealized profit and Loss
         * @example 0
         */
        futures_session_upl: number
        /**
         * @description Profit and loss
         * @example 0.02032221
         */
        total_pl: number
        /**
         * @description Projected maintenance margin (for portfolio margining users)
         * @example 1
         */
        projected_maintenance_margin?: number
        /**
         * @description Account id (available when parameter `extended` = `true`)
         * @example 12354
         */
        id: number
        /**
         * @description Options summary gamma
         * @example 0
         */
        options_gamma: number
        /**
         * @description The maintenance margin.
         * @example 0.1334519
         */
        maintenance_margin: number
        /**
         * @description The account's available to withdrawal funds
         * @example 2.26
         */
        available_withdrawal_funds: number
        /**
         * @description The account's initial margin
         * @example 0.379882
         */
        initial_margin: number
        /**
         * @description Session funding
         * @example 0
         */
        session_funding: number
        /**
         * @description The account's available funds
         * @example 2.2638913
         */
        available_funds: number
        /**
         * @description The account's current equity
         * @example 2.6437733
         */
        equity: number
        /**
         * @description Account type (available when parameter `extended` = `true`)
         * @enum {string}
         */
        type: 'main' | 'subaccount'
        /**
         * @description User email (available when parameter `extended` = `true`)
         * @example support@deribit.com
         */
        email: string
        /**
         * @description Account name (given by user) (available when parameter `extended` = `true`)
         * @example name
         */
        username: string
        /**
         * @description The sum of position deltas
         * @example 0.1334
         */
        delta_total: number
        /**
         * @description Futures session realized profit and Loss
         * @example 0
         */
        futures_session_rpl: number
        /**
         * @description Options summary theta
         * @example 0
         */
        options_theta: number
        /**
         * @description Options profit and Loss
         * @example 0
         */
        options_pl: number
        /**
         * @description Options session realized profit and Loss
         * @example 0
         */
        options_session_rpl: number
        /**
         * @description The deposit address for the account (if available)
         * @example 14diAAyXL5UzhPTCKC998ch2GV7DMb7yDi
         */
        deposit_address?: string
        /**
         * @description System generated user nickname (available when parameter `extended` = `true`)
         * @example myname
         */
        system_name: string
        /**
         * @description Options session unrealized profit and Loss
         * @example 0
         */
        options_session_upl: number
        /**
         * @description Whether two factor authentication is enabled (available when parameter `extended` = `true`)
         * @example false
         */
        tfa_enabled: boolean
        /**
         * @description Projected initial margin (for portfolio margining users)
         * @example 1
         */
        projected_initial_margin?: number
        /**
         * @description The account's balance
         * @example 3.4906363
         */
        balance: number
        /**
         * @description Options summary delta
         * @example 0
         */
        options_delta: number
      }
    }
    address_book_item: {
      currency: components['schemas']['currency']
      address: components['schemas']['currency_address']
      type?: components['schemas']['address_book_type']
      creation_timestamp: components['schemas']['timestamp']
    }
    /**
     * @description Continuation token for pagination.
     * @example xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT
     */
    continuation: string
    /** @description The price for the last trade */
    last_price: number
    /**
     * @description Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin`, `rejection_reason`
     * @enum {string}
     */
    transfer_state: 'prepared' | 'confirmed' | 'cancelled' | 'waiting_for_admin' | 'rejection_reason'
    /**
     * @description Currency, i.e `"BTC"`, `"ETH"` or `"any"` if don't care
     * @enum {string}
     */
    currency_with_any: 'BTC' | 'ETH' | 'any'
    /** @description `true` if created with API */
    api: boolean
    /**
     * @description order state, `"open"`, `"filled"`, `"rejected"`, `"cancelled"`, `"untriggered"`
     * @enum {string}
     */
    order_state: 'open' | 'filled' | 'rejected' | 'cancelled' | 'untriggered' | 'triggered'
    /**
     * @description The cumulative amount of all orders up till given price
     * @example 8000
     */
    cumulative_amount: number
    /** @description The current best bid price, `null` if there aren't any bids */
    best_bid_price: number
    /**
     * @description Amount of funds in given currency
     * @example 1
     */
    currency_amount: number
    /** @description Option price in USD (Only if `advanced="usd"`) */
    usd: number
    asks: string[]
    /** @description The sequence number of the trade within instrument */
    trade_seq: number
    /**
     * @description Trigger type (Only for stop orders). Allowed values: `"index_price"`, `"mark_price"`, `"last_price"`.
     * @enum {string}
     */
    trigger: 'index_price' | 'mark_price' | 'last_price'
    /**
     * @description Transaction id in proper format for currency, `null` if id is not available
     * @example 1b1fb5568515e2b79503501e3d3680b2d0838d5dfc2d15a04eb8cd9fbbe0b572
     */
    currency_transaction_id: string
    /** @description Current index price */
    index_price: number
    /** @description The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum. */
    min_price: number
    /**
     * @description Unique instrument identifier
     * @example BTC-PERPETUAL
     */
    instrument_name: string
    /**
     * @description Total number of results available
     * @example 101
     */
    result_count: number
    /**
     * @description Order type, `"all"`, `"limit"`, `"stop"`
     * @enum {string}
     */
    simple_order_type: 'all' | 'limit' | 'stop'
    /** @description It represents the requested order size of all best bids */
    best_bid_amount: number
    /**
     * @description Address in proper format for currency
     * @example 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
     */
    currency_address: string
    /**
     * @description Address book type
     * @enum {string}
     */
    address_book_type: 'transfer' | 'withdrawal'
    /** @description Name of the underlying future, or `index_price` (options only) */
    underlying_index: number
    /**
     * @description The timestamp (seconds since the Unix epoch, with millisecond precision)
     * @example 1536569522277
     */
    timestamp: number
    /** @description Unique (per currency) trade identifier */
    trade_id: string
    /**
     * @description Instrument kind, `"future"` or `"option"` or `"any"` if don't care
     * @enum {string}
     */
    kind_with_any: 'future' | 'option' | 'any'
    /**
     * @description Deposit state, allowed values : `pending`, `completed`, `rejected`, `replaced`
     * @enum {string}
     */
    deposit_state: 'pending' | 'completed' | 'rejected' | 'replaced'
    /**
     * @description advanced type: `"usd"` or `"implv"` (Only for options; field is omitted if not applicable).
     *
     * @enum {string}
     */
    advanced: 'usd' | 'implv'
    /** @description (Only for option) implied volatility for best bid */
    bid_iv: number
    /**
     * @description order state, `"open"`, `"filled"`, `"rejected"`, `"cancelled"`, `"untriggered"` or `"archive"` (if order was archived)
     * @enum {string}
     */
    order_state_in_user_trade: 'open' | 'filled' | 'rejected' | 'cancelled' | 'untriggered' | 'archive'
    /**
     * @description Instrument kind, `"future"` or `"option"`
     * @enum {string}
     */
    kind: 'future' | 'option'
    /** @enum {string} */
    sorting: 'asc' | 'desc' | 'default'
    /** @description Average fill price of the order */
    average_price: number
    /** @description Profit and loss in base currency. */
    profit_loss: number
    bids: string[]
    /** @description Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH. */
    filled_amount: number
    /** @description The current best ask price, `null` if there aren't any asks */
    best_ask_price: number
    /**
     * @description Transfer direction
     * @enum {string}
     */
    transfer_direction: 'payment' | 'income'
    /** @description The number of contracts to be traded. */
    filled_quantity: number
    /**
     * @description Id of transfer
     * @example 12
     */
    transfer_id: number
    /** @description (Only for option) implied volatility for best ask */
    ask_iv: number
    /**
     * @description Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`
     * @enum {string}
     */
    withdrawal_state: 'unconfirmed' | 'confirmed' | 'cancelled' | 'completed' | 'interrupted' | 'rejected'
    /** @description The settlement price for the instrument. Only when `state = open` */
    settlement_price: number
    /**
     * @description The timestamp of last change (seconds since the Unix epoch, with millisecond precision)
     * @example 1536569522277
     */
    timestamp_for_book_notifications: number
    /** @description It represents the requested order size of all best asks */
    best_ask_amount: number
    /**
     * @description direction, `buy` or `sell`
     * @enum {string}
     */
    direction: 'buy' | 'sell'
    /** @description The settlement price for the instrument. Only when `state = closed` */
    delivery_price: number
    /**
     * @description Order time in force: `"good_til_cancelled"`, `"fill_or_kill"`, `"immediate_or_cancel"`
     * @enum {string}
     */
    time_in_force: 'good_til_cancelled' | 'fill_or_kill' | 'immediate_or_cancel'
    /** @description `true` for reduce-only orders only */
    reduce_only: boolean
    /** @description The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. */
    open_interest: number
    /** @description Implied volatility in percent. (Only if `advanced="implv"`) */
    implv: number
    /**
     * @description The cumulative quantity
     * @example 800
     */
    cumulative_quantity: number
    /** @description The mark price for the instrument */
    mark_price: number
    stats: {
      /** @description volume during last 24h in base currency */
      volume: number
      /** @description highest price during 24h */
      high: number
      /** @description lowest price during 24h */
      low: number
    }
    /**
     * @description order type, `"limit"`, `"market"`, `"stop_limit"`, `"stop_market"`
     * @enum {string}
     */
    order_type: 'market' | 'limit' | 'stop_market' | 'stop_limit'
    /** @description (Only for option) implied volatility for mark price */
    mark_iv: number
    /** @description Only for options */
    greeks: {
      /** @description (Only for option) The theta value for the option */
      theta: number
      /** @description (Only for option) The vega value for the option */
      vega: number
      /** @description (Only for option) The gamma value for the option */
      gamma: number
      /** @description (Only for option) The rho value for the option */
      rho: number
      /** @description (Only for option) The delta value for the option */
      delta: number
    }
    /** @description Maximum amount within an order to be shown to other traders, 0 for invisible order. */
    max_show: number
    /** @description user defined label (up to 32 characters) */
    label: string
    /**
     * @description Address type/purpose, allowed values : `deposit`, `withdrawal`, `transfer`
     * @enum {string}
     */
    wallet_address_type: 'deposit' | 'withdrawal' | 'transfer'
    /**
     * @description Matching (taker) order id, `null` if it is not users order
     * @example 100234
     */
    matching_id: string
    /**
     * @description Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount
     * @enum {string}
     */
    transfer_type: 'user' | 'subaccount'
    /** @description Current funding (perpetual only) */
    current_funding: number
    /** @description Whether the stop order has been triggered (Only for stop orders) */
    triggered: boolean
    /**
     * @description Contract size, for futures in USD, for options in BTC.
     * @example 10
     */
    contract_size: number
    /**
     * @description Unique order identifier
     * @example ETH-100234
     */
    order_id: string
    /** @description Price in base currency */
    price: number
    /**
     * @description The type of settlement. `settlement`, `delivery` or `bankruptcy`.
     * @enum {string}
     */
    settlement_type: 'settlement' | 'delivery' | 'bankruptcy'
    /**
     * @description For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.
     * @example Smith
     */
    transfer_other_side: string
    /** @description stop price (Only for future stop orders) */
    stop_price: number
    /** @description `true` for post-only orders only */
    post_only: boolean
    /**
     * @description Direction of the "tick" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).
     * @enum {integer}
     */
    tick_direction: 0 | 1 | 2 | 3
    /**
     * @description Fee in currency
     * @example 0.000023
     */
    fee: number
    /**
     * @description The state of the order book. Possible values are `open` and `closed`.
     * @enum {string}
     */
    book_state: 'open' | 'closed'
    /** @description Funding 8h (perpetual only) */
    funding_8h: number
    /** @description Commission paid so far (in base currency) */
    commission: number
    /** @description The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum. */
    max_price: number
    /** @description It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. */
    amount: number
    /** @description Underlying price for implied volatility calculations (options only) */
    underlying_price: number
    /**
     * @description Order type, `"all"`, `"limit"`, `"stop_all"`, `"stop_limit"` or `"stop_market"`
     * @enum {string}
     */
    order_type2: 'all' | 'limit' | 'stop_all' | 'stop_limit' | 'stop_market'
    /** @description Value of the volatility of the underlying instrument */
    implied_volatility: number
    /** @description Interest rate used in implied volatility calculations (options only) */
    interest_rate: number
    /** @description The number of contracts to be traded. */
    quantity: number
    public_test_response: {
      result: {
        /**
         * @description The API version
         * @example 2.1.26
         */
        version: string
      }
    }
    key_number_pair: {
      name: string
      value: number
    }
    private_remove_from_address_book_response: {
      /**
       * @description ok
       * @example ok
       */
      result: string
    }
    deribit_price_ranking_notification: {
      /**
       * @description The timestamp of the last update from stock exchange
       * @example 1536569522277
       */
      timestamp?: number
      /** @description Stock exchange index price */
      price?: number
      /**
       * @description Stock exchange identifier
       * @example bitstamp
       */
      identifier?: string
      /** @description Stock exchange status */
      enabled?: boolean
      /** @description The weight of the ranking given in percent */
      weight?: number
    }[]
    public_ticker_response: {
      result: components['schemas']['ticker_notification']
    }
    quote_notification: {
      best_bid_amount: components['schemas']['best_bid_amount']
      best_ask_price: components['schemas']['best_ask_price']
      best_ask_amount: components['schemas']['best_ask_amount']
      timestamp: components['schemas']['timestamp']
      best_bid_price: components['schemas']['best_bid_price']
      instrument_name: components['schemas']['instrument_name']
    }
    public_trades_history_response: {
      result: {
        has_more: boolean
        trades: components['schemas']['public_trade'][]
      }
    }
    settlement_response: {
      result: {
        continuation: components['schemas']['continuation']
        settlements: components['schemas']['settlement'][]
      }
    }
    private_edit_response: {
      result: {
        trades: components['schemas']['user_trade'][]
        order: components['schemas']['order']
      }
    }
    user_trades_history_response: {
      result: {
        has_more: boolean
        trades: components['schemas']['user_trade'][]
      }
    }
    public_get_funding_chart_data_response: {
      result: {
        /**
         * @description Current index price
         * @example 1234.23
         */
        index_price: number
        /**
         * @description maximal interest
         * @example 0.005
         */
        max: number
        /**
         * @description Current interest
         * @example 0.005000670552845
         */
        current_interest: number
        /**
         * @description Current interest 8h
         * @example 0.0040080896931
         */
        interest_8h: number
        data: string[]
      }
    }
    deposit: {
      updated_timestamp: components['schemas']['timestamp']
      state: components['schemas']['deposit_state']
      received_timestamp: components['schemas']['timestamp']
      currency: components['schemas']['currency']
      address: components['schemas']['currency_address']
      amount: components['schemas']['currency_amount']
      transaction_id: components['schemas']['currency_transaction_id']
    }
    private_get_position_response: {
      result: components['schemas']['position']
    }
    position: {
      direction: components['schemas']['direction']
      /** @description Only for options, average price in USD */
      average_price_usd?: number
      /** @description Only for futures, estimated liquidation price */
      estimated_liquidation_price?: number
      /** @description Floating profit or loss */
      floating_profit_loss: number
      /** @description Only for options, floating profit or loss in USD */
      floating_profit_loss_usd?: number
      /** @description Open orders margin */
      open_orders_margin: number
      /** @description Profit or loss from position */
      total_profit_loss: number
      /** @description Realized profit or loss */
      realized_profit_loss: number
      /** @description Delta parameter */
      delta: number
      /** @description Initial margin */
      initial_margin: number
      /** @description Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC) */
      size: number
      /** @description Maintenance margin */
      maintenance_margin: number
      kind: components['schemas']['kind']
      /** @description Current mark price for position's instrument */
      mark_price: number
      /** @description Average price of trades that built this position */
      average_price: number
      /** @description Last settlement price for position's instrument 0 if instrument wasn't settled yet */
      settlement_price: number
      /** @description Current index price */
      index_price: number
      instrument_name: components['schemas']['instrument_name']
      /** @description Only for futures, position size in base currency */
      size_currency?: number
    }
    private_address_book_response: {
      result: components['schemas']['address_book_item'][]
    }
    user_trade: {
      /** @description Trade direction of the taker */
      direction: components['schemas']['direction']
      fee_currency: components['schemas']['currency']
      /** @description Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade */
      order_id: string
      /**
       * @description The timestamp of the trade
       * @example 1517329113791
       */
      timestamp: number
      /** @description The price of the trade */
      price: components['schemas']['price']
      /** @description Option implied volatility for the price (Option only) */
      iv?: number
      trade_id: components['schemas']['trade_id']
      /** @description User's fee in units of the specified `fee_currency` */
      fee: number
      /**
       * @description Order type: `"limit`, `"market"`, or `"liquidation"`
       * @enum {string}
       */
      order_type?: 'limit' | 'market' | 'liquidation'
      trade_seq: components['schemas']['trade_seq']
      /** @description `true` if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that */
      self_trade: boolean
      state: components['schemas']['order_state_in_user_trade']
      /** @description User defined label (presented only when previously set for order by user) */
      label?: string
      /** @description Index Price at the moment of trade */
      index_price: number
      /** @description Trade amount. For perpetual and futures - in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH. */
      amount: number
      instrument_name: components['schemas']['instrument_name']
      tick_direction: components['schemas']['tick_direction']
      /** @description Always `null`, except for a self-trade which is possible only if self-trading is switched on for the account (in that case this will be id of the maker order of the subscriber) */
      matching_id: string
      /**
       * @description Describes what was role of users order: `"M"` when it was maker order, `"T"` when it was taker order
       * @enum {string}
       */
      liquidity?: 'M' | 'T'
    }
    order: {
      direction: components['schemas']['direction']
      reduce_only?: components['schemas']['reduce_only']
      triggered?: components['schemas']['triggered']
      order_id: components['schemas']['order_id']
      price: components['schemas']['price']
      time_in_force: components['schemas']['time_in_force']
      api: components['schemas']['api']
      order_state: components['schemas']['order_state']
      implv?: components['schemas']['implv']
      advanced?: components['schemas']['advanced']
      post_only: components['schemas']['post_only']
      usd?: components['schemas']['usd']
      stop_price?: components['schemas']['stop_price']
      order_type: components['schemas']['order_type']
      last_update_timestamp: components['schemas']['timestamp']
      max_show: components['schemas']['max_show']
      profit_loss?: components['schemas']['profit_loss']
      /** @description `true` if order was automatically created during liquidation */
      is_liquidation: boolean
      filled_amount?: components['schemas']['filled_amount']
      label: components['schemas']['label']
      commission?: components['schemas']['commission']
      amount?: components['schemas']['amount']
      trigger?: components['schemas']['trigger']
      instrument_name: components['schemas']['instrument_name']
      creation_timestamp: components['schemas']['timestamp']
      average_price?: components['schemas']['average_price']
    }
  }
  parameters: {
    /** @description Client software version */
    client_software_version: string
    /** @description Optional price for limit order. */
    optional_price: number
    /** @description The currency symbol */
    optional_currency: components['schemas']['currency']
    /** @description Continuation token for pagination */
    continuation: string
    /** @description The sequence number of the first trade to be returned */
    optional_start_seq: number
    /** @description Index identifier, matches (base) cryptocurrency with quote currency */
    index_name: 'btc_usd' | 'eth_usd'
    /** @description The offset for pagination, default - `0` */
    optional_offset: number
    /** @description The currency symbol */
    currency: components['schemas']['currency']
    /** @description The currency symbol or `"any"` for all */
    currency_with_any: components['schemas']['currency_with_any']
    /** @description Number of requested items, default - `10` */
    optional_count10: number
    /** @description Amount of funds to be transferred */
    transfer_currency_amount: number
    /** @description Settlement type */
    optional_settlement_type: components['schemas']['settlement_type']
    /** @description Client software name */
    client_software_name: string
    /** @description The most recent timestamp to return result for */
    end_timestamp: components['schemas']['timestamp']
    /** @description The ID number of the first trade to be returned */
    optional_start_trade_id: components['schemas']['trade_id']
    boolean_state: boolean
    /** @description user defined label for the order (maximum 32 characters) */
    order_label: string
    /** @description The order type, default: `"limit"` */
    order_type: 'limit' | 'stop_limit' | 'market' | 'stop_market'
    /** @description Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options) */
    edit_advanced_order_type: components['schemas']['advanced']
    /** @description Maximum amount within an order to be shown to other customers, `0` for invisible order */
    max_show: number
    /** @description Id of destination subaccount */
    transfer_destination_for_subaccount: number
    /** @description The latest timestamp to return result for */
    optional_settlement_start_timestamp: components['schemas']['timestamp']
    /** @description The sequence number of the last trade to be returned */
    optional_end_seq: number
    /** @description Include trades older than 7 days, default - `false` */
    optional_include_old_trades: boolean
    /** @description The ID number of the last trade to be returned */
    optional_end_trade_id: components['schemas']['trade_id']
    /** @description Defines trigger type, required for `"stop_limit"` order type */
    trigger: components['schemas']['trigger']
    /** @description Instrument name */
    instrument_name: components['schemas']['instrument_name']
    /** @description Advanced option order type. (Only for options) */
    advanced_order_type: components['schemas']['advanced']
    /** @description It represents the requested order size. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH */
    order_quantity: number
    /** @description Specifies time period. `8h` - 8 hours, `24h` - 24 hours */
    length_for_perpetual_chart: '8h' | '24h'
    /** @description Instrument name */
    optional_instrument_name: components['schemas']['instrument_name']
    /** @description Order type, default - `all` */
    optional_order_type: components['schemas']['order_type2']
    /** @description Instrument kind, if not provided instruments of all kinds are considered */
    optional_kind: components['schemas']['kind']
    /** @description If `true`, the order is considered reduce-only which is intended to only reduce a current position */
    reduce_only: boolean
    /** @description Name of address book entry */
    address_name: string
    /** @description Address book type */
    address_book_type: components['schemas']['address_book_type']
    /** @description The order id */
    order_id: components['schemas']['order_id']
    /** @description TFA code, required when TFA is enabled for current account */
    tfa: string
    /** @description The earliest timestamp to return result for */
    start_timestamp: components['schemas']['timestamp']
    /** @description Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied */
    subscription_interval: '100ms' | 'raw'
    /** @description Instrument kind or `"any"` for all */
    kind_with_any: components['schemas']['kind_with_any']
    /** @description Number of requested items, default - `20` */
    optional_count20: number
    /** @description Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database) */
    optional_sorting: components['schemas']['sorting']
    /** @description Stop price, required for stop limit orders (Only for stop orders) */
    stop_price: number
    /** @description The withdrawal id */
    withdrawal_id: number
    /** @description <p>The order price in base currency.</p> <p>When editing an option order with advanced=usd, the field price should be the option price value in USD.</p> <p>When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p> */
    edit_order_price: number
    /** @description <p>The order price in base currency (Only for limit and stop_limit orders)</p> <p>When adding order with advanced=usd, the field price should be the option price value in USD.</p> <p>When adding order with advanced=implv, the field price should be a value of implied volatility in percentages. For example,  price=100, means implied volatility of 100%</p> */
    order_price: number
    /** @description Include in result fully unfilled closed orders, default - `false` */
    optional_include_unfilled_orders: boolean
    /** @description <p>If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the bid.</p> <p>Only valid in combination with time_in_force=`"good_til_cancelled"`</p> */
    post_only: boolean
    /** @description Address in currency format, it must be in address book */
    currency_address_from_address_book: string
    /** @description Destination address from address book */
    transfer_destination_for_user: string
    /** @description <p>Specifies how long the order remains in effect. Default `"good_til_cancelled"`</p> <ul> <li>`"good_til_cancelled"` - unfilled order remains in order book until cancelled</li> <li>`"fill_or_kill"` - execute a transaction immediately and completely or not at all</li> <li>`"immediate_or_cancel"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled</li> </ul> */
    time_in_force: 'good_til_cancelled' | 'fill_or_kill' | 'immediate_or_cancel'
    /** @description Withdrawal priority, optional for BTC, default: `high` */
    withdrawal_priority: 'insane' | 'extreme_high' | 'very_high' | 'high' | 'mid' | 'low' | 'very_low'
    /** @description Direction of transfer */
    transfer_direction: components['schemas']['transfer_direction']
    /** @description Id of transfer */
    transfer_id: components['schemas']['transfer_id']
    /** @description Order type - limit, stop or all, default - `all` */
    optional_simple_order_type: components['schemas']['simple_order_type']
    /** @description Include in result orders older than 2 days, default - `false` */
    optional_include_old_orders: boolean
    /** @description The order type */
    simple_order_type_market_limit: 'limit' | 'market'
    /** @description Amount of funds to be withdrawn */
    withdrawal_currency_amount: number
  }
}

export interface operations {}

export interface external {}
